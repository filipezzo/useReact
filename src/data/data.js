export const fundamentals = [
  {
    id: 1,
    title: "Arrow Functions",
    content:
      "Forma mais concisa de escrever uma fun√ß√£o e n√£o possue aquele tal do this. ",
  },

  {
    id: 2,
    title: "Objetos",
    content:
      "S√£o estruturas de dados  que permitem armazenar pares de chave-valor. Eles s√£o usados para representar entidades  com propriedades e m√©todos.",
  },

  {
    id: 3,
    title: "Desestrutura√ß√£o",
    content:
      "√â uma maneira conveniente de extrair valores de arrays ou objetos em vari√°veis separadas. √â amplamente utilizada e pr√°tica.",
  },

  {
    id: 4,
    title: "Spread Operator ",
    content:
      "...usado para espalhar elementos de um array || propriedades de um objeto. Muito utilizado no React. Ser√° que vc viu isso no nosso site? üëÄ ",
  },

  {
    id: 5,
    title: "Promises",
    content:
      "N√£o √© a promessa de ir na academia mas sim de uma resposta (sucesso ou falha) de uma opera√ß√£o ass√≠ncrona. ",
  },

  {
    id: 6,
    title: "Imperativo VS Declarativo",
    content:
      "Paradigmas de programa√ß√£o no qual imperativo voc√™ foca no como fazer algo e o declarativo no que fazer.",
  },
];

export const posts = [
  {
    id: crypto.randomUUID(),
    title: "Componentes üß©",
    subtitle: "Indo al√©m do <Componente />",
    content: {
      title: "Desvendando os Segredos dos Componentes",
      paragraphs: [
        {
          p: "Em termos simples, os componentes em React s√£o como blocos de constru√ß√£o modulares: s√£o fun√ß√µes puras que retornam JSX, abstraindo sua pr√≥pria l√≥gica, estilos e marca√ß√£o. Essa abstra√ß√£o simplifica o desenvolvimento e a manuten√ß√£o do c√≥digo. Como pequenos legos que juntos constroem arquiteturas complexas.",
        },

        {
          p: "O retorno desse JSX √© compilado pelo babel  e transformado em uma chamada da fun√ß√£o React.createElement()  resultando em um objeto que descreve precisamente o que deve ser renderizado na interface do usu√°rio.",
        },

        {
          p: "Ent√£o quando o React chama um componente (<Componente />) chamamos isso de instanciar. O interessante √© que cada uma dessas chamadas de componente (inst√¢ncias) possue seu pr√≥prio estado - state e lifecycle - effect. Toda vez que um componente √© renderizado, uma nova inst√¢ncia desse componente √© criada.",
        },
        {
          p: "Mil maravilhas n√©? e √© isso mesmo. Componente vicia..mas tome cuidado para n√£o componentizar tudo. No come√ßo pode ser dificil de entender, mas n√£o desista essa abstra√ß√£o √© linda e ir√° te ajudar muito. ",
        },
      ],
      image:
        "https://miro.medium.com/v2/resize:fit:3196/format:webp/1*rA9t2B8J7ilWn_r0mvSVTA.jpeg",
    },
  },
  {
    id: crypto.randomUUID(),
    title: "Props üß†",
    subtitle: "Comunica√ß√£o entre componentes",
    content: {
      title: "A import√¢ncia das Propriedades",
      paragraphs: [
        {
          p: "As props s√£o como os argumentos de uma fun√ß√£o: fornecem informa√ß√µes para o componente funcionar. Imagine um componente Button que recebe uma prop text para definir o texto do bot√£o. Ao usar o componente, voc√™ pode passar diferentes valores para a prop text, criando bot√µes com diferentes textos.",
        },
        {
          p: "√â importante lembrar que as props s√£o imut√°veis. Isso significa que, uma vez definidas, n√£o podem ser alteradas dentro do componente filho. O React usa um fluxo unidirecional de dados (one-way data flow). Isso significa que os dados fluem apenas do componente pai para o componente filho. O filho n√£o pode modificar diretamente as props que recebe.",
        },
        {
          p: "Ok, mas como eu acesso elas? O React passa as props como um objeto, o que torna simples acess√°-las com props.algo. Voc√™ tamb√©m pode {desestrutur√°-las} diretamente, que √© a minha solu√ß√£o favorita.",
        },

        {
          p: "Por √∫ltimo vale a pena falar sobre a propriedade children. Ela √© especial e permite que voc√™ acesse o conte√∫do entre a abertura e o fechamento de um componente. Isso √© √∫til para renderizar elementos din√¢micos dentro de um componente, criar layouts e √© uma das solu√ß√µes para o problema de prop drilling (veremos em outro post).",
        },
      ],
      image:
        "https://res.cloudinary.com/ddxwdqwkr/image/upload/f_auto/v1614961728/patterns.dev/render-props.jpg",
    },
  },
  {
    id: crypto.randomUUID(),
    title: "State üì∏",
    subtitle: "const [king, setKing] = useState('üëë')",
    content: {
      title: "O Conceito que domina tudo",
      paragraphs: [
        {
          p: "O state √© como uma screenshot do nosso componente em um determinado momento. Ele armazena os dados desse componente e desencadeia uma nova renderiza√ß√£o caso seu valor seja modificado. Em outras palavras, √© o state que controla o re-rendering da nossa interface do usu√°rio, mantendo esse valor consistente entre as renderiza√ß√µes.",
        },
        {
          p: "Em componentes funcionais utilizamos o state atr√°ves do hook pr√≥prio do React chamado useState que nos entrega  uma desestrutura√ß√£o de um array e nos retorna o valor e uma fun√ß√£o que atualiza esse valor (e causa re-render).",
        },
        {
          p: "A sintaxe √©  const [valor, setValor] = useState('valor inicial')",
        },

        {
          p: "Por fim, o state n√£o √© apenas mais uma ferramenta, mas sim o cora√ß√£o de todo o processo. Quando dominamos o uso do state, estamos no controle. Considere este post como uma breve introdu√ß√£o, pois o mundo do state(estado) √© vasto e voc√™ precisa explor√°-lo. Fica uma dica üëÄ state management, custom hooks/states",
        },
      ],
      image:
        "https://blog.openreplay.com/images/steps-to-develop-global-state-for-react-with-hooks-without-context/images/hero.jpg",
    },
  },

  {
    id: crypto.randomUUID(),
    title: "Efeitos Colaterais",
    subtitle: "Eventos & useEffect ",
    content: {
      title: "A simplicidade do React VS Realidade do Mundo",
      paragraphs: [
        {
          p: "At√© esse ponto, a gente viu o qu√£o lindo e simples √© o React na sua forma mais pura. Voc√™ encapsula UI, state e os eventos nos componentes, faz essa composi√ß√£o e passa data para baixo da nossa √°rvore de UI via props. Lindo n√©?",
        },

        {
          p: "Mas no mundo real, muitas vezes a gente precisa conversar com servidores, interagir diretamente com  o DOM e utilizar a API do browser para setar timeouts, localstorage ou seja, conversar com 'coisas' que geram efeitos colaterais.",
        },

        {
          p: "Portanto, j√° que vamos sair do nosso lindo mundo eu gostaria de setar algumas regras. const [regras, setRegras] = useState('‚úàÔ∏è')",
        },

        {
          p: "Regra #0 (ü§ì) - Quando um componente renderiza, ele o deve fazer sem encontrar nenhum efeito colateral (fn puras) mas a realidade do mundo √© dura.",
        },

        {
          p: "Regra #1 - Se o efeito colateral √© gerado por um evento do usuario, coloque-o em um eventhandler. ",
        },
        {
          p: "Exemplo seria setar um localstorage com o modo dark/light ap√≥s o √∫suario clicar no seu modo preferido. Pq isso funciona? Pq o o que est√° dentro da fun√ß√£o do eventhandler n√£o importa para o React & o mesmo n√£o o atrapalha no Render daquele componente, o mantendo puro.",
        },

        {
          p: "Regra #2 - Se o efeito colateral est√° syncando seu componente com algum sistema externo, use o useEffect ",
        },
        {
          p: "O useEffect funciona tirando o efeito colateral do fluxo de render do React e o executando com um delay (somente ap√≥s o componente tenha renderizado). Um exemplo claro seria puxar dados de uma API assim que nossa pag carrega alimentando nosso front-end de forma dinamica.",
        },
      ],
      image:
        "https://i1.wp.com/blog.alexdevero.com/wp-content/uploads/2021/05/03-05-21-react-useeffect-hook-made-simple-blog.jpg?w=1024&ssl=1",
    },
  },
  {
    id: crypto.randomUUID(),
    title: "Renderiza√ß√£o ‚öõÔ∏è",
    subtitle: "view = fn(state)",
    content: {
      title: "React & Render ",
      paragraphs: [
        {
          p: "React na sua forma mais pura √© uma biblioteca para constru√ß√£o de interfaces. Isso √© t√£o verdade que podemos criar uma f√≥rmula ",
        },
        {
          p: "view = fn(state) ",
        },

        {
          p: "ps: se um dia o React me sustentar tatuarei essa f√≥rmula üòÑ",
        },
        {
          p: "Para verificar e manter em sincronia o que √© pintado na tela (view), a fun√ß√£o (componente) re-renderiza sempre que seu argumento (state) mudar. Mas vamos voltar um pouco, o que √© renderiza√ß√£o?",
        },

        {
          p: "Colocando de forma simples, renderiza√ß√£o √© apenas um termo chique para dizer que o React chama seu componente com a inten√ß√£o de atualizar a view",
        },

        {
          p: "Quando iniciamos nosso app, o React faz um render inicial. Mas somente isso n√£o seria interessante, n√£o √© mesmo? Afinal de contas, o React tem que honrar o seu nome e ser reativo a mudan√ßas. Agora vem a pergunta: quando o React re-renderiza?",
        },

        {
          p: "A resposta √© simples. O React Re-renderiza toda vez que seu state muda.",
        },
      ],
      image:
        "https://media.licdn.com/dms/image/D5612AQEv1a4TJDmvTg/article-cover_image-shrink_720_1280/0/1709224996047?e=1717027200&v=beta&t=vKqsQimOasedw0QY-Kp2GrmWiCijS6vs4GZci6yRSmI",
    },
  },

  {
    id: crypto.randomUUID(),
    title: "Atualiza√ß√£o do View ",
    subtitle: "Voc√™ achava que era ü™Ñ,  n√©?",
    content: {
      title: "Algoritmo de Reconcilia√ß√£o",
      paragraphs: [
        {
          p: "O respons√°vel por essa üßùü™Ñ √© o seu algoritmo de reconcilia√ß√£o. Ele possui 2 processos conhecidos como Diffing & Reconciliation",
        },

        {
          p: "Quando o React re-renderiza um componente, ele gera uma nova √°rvore de interface do usu√°rio (anteriormente conhecida como DOM virtual) e a compara com a vers√£o anterior para detectar diferen√ßas causadas por mudan√ßas no estado. Esse processo de compara√ß√£o √© chamado de Diffing ",
        },

        {
          p: "Ap√≥s o diffing realizar seu trabalho, o React aplica essas diferen√ßas no DOM real. Esse processo √© chamado de Reconciliation.",
        },

        {
          p: "Voc√™ deve estar se perguntando 'ok mas por que tudo isso?'. Ao minimizar as atualiza√ß√µes no DOM real apenas para as partes que realmente mudaram, o React oferece um desempenho superior, mesmo em aplica√ß√µes complexas. Portanto, ao desenvolver com React, √© importante estar ciente desses conceitos para evitar problemas & saber como realmente as coisas acontecem. Espero n√£o ter acabado com sua magia üòÑ",
        },
      ],
      image:
        "https://img2.teletype.in/files/1d/95/1d95dc14-c70c-4e19-8c4c-a66341ce276f.png",
    },
  },

  {
    id: crypto.randomUUID(),
    title: "Library VS Framework",
    subtitle: " famoso tanto faz? ",
    content: {
      title: "React N√£o √© um framework",
      paragraphs: [
        {
          p: "Tenho certeza que voc√™ ao surfar üèÑ‚Äç‚ôÇÔ∏è (estou ficando velho) pela internet j√° ouviu algu√©m dizer que o React √© um framework e neste post te mostrarei por qu√™ isso est√° errado mas tamb√©m explicaremos por qu√™ as pessoas dizem isso. ",
        },

        {
          p: "Frameworks s√£o solu√ß√µes abrangentes e muitas vezes v√™m com uma s√©rie de opini√µes embutidas. Em suma, um framework √© projetado para resolver uma gama de problemas espec√≠ficos, fornecendo recursos para lidar com cada um deles. Um exemplo claro disso √© o Angular, que possui sua pr√≥pria abordagem para lidar com roteamento.",
        },

        {
          p: "Por outro lado, bibliotecas tendem a ser mais focadas e diretas em sua proposta. Elas se concentram em resolver eficazmente um problema espec√≠fico sem impor muitas restri√ß√µes sobre como voc√™ deve trabalhar. No caso do React, ele se destaca como uma biblioteca para a constru√ß√£o de interfaces de usu√°rio de forma declarativa e altamente perform√°tica.",
        },

        {
          p: "Ent√£o, por que algumas pessoas insistem em chamar o React de framework? Bem, √© importante compreender que o React √© apenas uma pe√ßa do quebra-cabe√ßa. Para lidar com outros aspectos do desenvolvimento, como roteamento, por exemplo, √© necess√°rio recorrer a outras bibliotecas. Ao trabalhar com o React 'puro', √© comum adotar v√°rias outras bibliotecas para suprir diferentes necessidades. √â esse conjunto de ferramentas adicionais que √†s vezes nos leva ao equ√≠voco de considerar o React como um framework. ",
        },
      ],
      image:
        "https://miro.medium.com/v2/resize:fit:720/format:webp/1*wC4nDyvf5jbb6FJT6EEafg.png",
    },
  },

  {
    id: crypto.randomUUID(),
    title: "Styling no React",
    subtitle: "Qual a melhor op√ß√£o?",
    content: {
      title: "Como estilizar meu projeto?",
      paragraphs: [
        {
          p: "Existem muitas op√ß√µes no mercado e a maioria vai te entregar o trabalho. Portanto existem boas solu√ß√µes, mas sempre existe uma que √© a melhor üçÉüå¨Ô∏èüéê",
        },

        {
          p: "Apesar da minha forte opini√£o e amor pelo tailwind a realidade √© que quando voc√™ entrar em uma empresa e/ou projeto voc√™ ter√° que se adequar as tecs que aquela equipe utiliza. (tipo eu sendo obrigado a usar SASS ü•π 'feelsbad') ent√£o faz parte do nosso trabalho conhecer e nos adaptar. Dito isso, n√£o h√° nada de errado de voc√™ ter uma favorita para novos projetos e/ou se aprofundar.",
        },

        {
          p: "Para mim por quest√µes de produtividade, facilidade e uma excelente documenta√ß√£o, eu vou de tailwind, e para ser bom no tailwind voc√™ tem que ter uma boa base do css real/raiz o que para mim √© um grande plus. ",
        },

        {
          p: "Para finalizar e voc√™ n√£o ficar com raiva de mim te darei outras op√ß√µes adotadas pelo mercado para voc√™ ir pesquisar. CSS-in-JS, module css, Material UI s√£o algumas das mais usadas. ",
        },
      ],
      image:
        "https://pbs.twimg.com/media/ELYsGXAW4AIsTRk?format=jpg&name=small",
    },
  },

  {
    id: crypto.randomUUID(),
    title: "O Futuro no Presente",
    subtitle: "qual sua stack favorita?",
    content: {
      title: "Baankai",
      paragraphs: [
        {
          p: "Imagine que HTML, CSS, JS, Babel e Webpack s√£o como Bankais (espero que tenha captado a refer√™ncia). Para voc√™, qual seria a Bankai de cada uma dessas tecnologias nos dias de hoje?",
        },

        {
          p: "Para mim, sempre que trabalho com essas tecnologias, sinto que estou lidando com suas formas mais avan√ßadas (talvez seja por isso que gosto tanto delas). HTML se transforma em JSX, CSS em Tailwind, JS em React com TypeScript, e Babel & Webpack em Vite.",
        },

        {
          p: "Este √© o √∫ltimo post da primeira vers√£o deste blog. Reconhe√ßo que ainda h√° espa√ßo para melhorias, mas √© importante lembrar de comparar seu progresso com sua vers√£o anterior e aproveitar o processo de aprendizado cont√≠nuo. Todos esses posts refletem minhas observa√ß√µes e incont√°veis horas de estudos/cursos sobre o React. ",
        },

        {
          p: "Gostaria de agradecer ao prof Edu Velhote por deixar eu me desafiar com esse projeto (Assesment da Infnet).",
        },
      ],
      image:
        "https://c4.wallpaperflare.com/wallpaper/412/952/873/bleach-kurosaki-ichigo-bankai-wallpaper-preview.jpg",
    },
  },
];
